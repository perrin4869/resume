Julian Grinblat
146-0085 Tokyo, Ota-ku, Kugahara 3-30-9, Colline Kugahara Room 104
090-7768-6902
  E-mail: julian@dotcore.co.il
  Github: https://github.com/perrin4869
  NPM: https://www.npmjs.com/~perrin4869


Professional Experience
================================================================================
Deloitte Tohmatsu Consulting, Tokyo, Japan                 Feb 01 2019 - Current

SOFTWARE ENGINEER

Working on the TechHarbor project in the Strategy unit. Main responsibilities are development,
maintenance and deployment of the react-based frontend and the serverless-based graphql API.

* Oversee development and integration of new features by remote oversea developers.
  Review all pull requests and provide guidance towards the preferred approach.

* Migrate from AWS Cognito based OAuth 2.0 implicit grant type to Authorization Code grant type
  to gain advantage of refresh tokens and remove 1 hour login limit.

* Utilize react-apollo based react hooks to fetch data from our apollo-lambda based API.
  Correcly manage application state and cache for performance. Integrate with identity tokens.
  Author unit tests for all hooks.

* Deploy a DynamoDB instance to store user-defined searches and relevant information.
  Expose API through graphql queries and mutations and write relevant unit and integration tests.
  Correctly display results on the client side, including form state managed by react-final-form,
  search results with react-apollo and blueprintjs tables, infinite scrolling based pagination.

* Store data exports over 5MB in S3, which are over the limit of what AWS Lambda
  functions can return. Respond with an HTTP redirect, handle in the client and save using file-saver.

* Setup docker-compose based development environment with elasticsearch, minio, and DynamoDB.
  Author custom docker images to create DynamoDB data tables and minio buckets. Run integration tests
  against this environment.

* Expose documents to registered users of our application via an S3 bucket, and manage access to objects
  in the bucket through a Cognito Identity Pool, our Cognito user pool, and the Javascript aws-sdk.

* Provide user behavior analytics, such as routes visited, sign in, sign out, session length, user retention,
  application errors, through an Amazon Pinpoint deployment.

* Implement recharts based graphs to display search data aggregations. Author relevant graphql queries.

* Utilize react-spring and react-transition-group to provide transition and scrolling animations.


Rakuten                                                Apr 01 2015 - Jan 31 2019

APPLICATION ENGINEER

Worked on the frontend portal for our self-service environment.  Originally
developed as a collection of React components, I introduced many libraries to
architect and test the application.

* Utilize Redux to manage global application state, write custom middlewares
  accomplish side effects such as API calls and saving data to local storage,
  author selectors using reselect and re-reselect

* Lint the codebase using eslint and the airbnb rules

* Author tests based on mocha, chai, sinon, enzyme

* Introduce react-final-form to manage the form state

* Add PostCSS and integrate it with webpack to build our CSS resources which
  included Bootstrap, Font Awesome and others

* Minify images using webpack and the imagemin plugin

DEVOPS ENGINEER

Originally assigned to the Server Platform Team upon joining the company.
Helped maintain our many storage solutions (Pure Storage, Nimble Storage,
etc), our OpenStack environment, our SDN environment, and others.  Some of the
tasks I accomplished include:

* Create a dashboard which visualizes storage telemetry such as operation rates
  and latency. This was built using Fluentd, InfluxDB, Grafana, SNMP, Paramiko
  and custom Python-based tools.

* Author Python scripts for automation of routine operations of our SDN
  environment. These scripts simplified and increased the reliability of routine
  operations such as backups and resource allocation with the hosting VMware
  cluster. Made use of pyVmomi to manage VMware resources.

* Fix a problem in our OpenStack environment where sysctl variables would be
  reset upon restart. Update the Ansible playbooks and provisioned the fixes to
  all the relevant nodes.

* Migrate OpenStack instances from one of our tenants to newly added tenants.
  This involved researching and testing the procedure which included manual
  updates of the relevant MySQL records, writing a manual and executing the
  operation successfully.

Education
================================================================================
Bachelor of Science, Physics                                          March 2015
Osaka University

Courses
===============================================================================

M101: MongoDB for Developers http://university.mongodb.com/course_completion/066efa7d13f84df789a4ddff81524640
M102: MongoDB for DBAs http://university.mongodb.com/course_completion/797324e4c82e4a27b2d33c3749476003
Kubernetes Certification by Mirantis (KCM100) https://training.mirantis.com/verify/certificate/status/bF19JZmlQoYyAoU4jkY15w/100-457-704

Open Source Contributions
================================================================================
Made several contributions to open source communities, mostly centered around
JavaScript and Node.js, which can be found publically on GitHub.

PULL REQUESTS

* https://github.com/socketio/socket.io/pull/2745
Socket.IO is a popular websocket library for Node.js which provides
abstractions for different kinds of persistent connections, such as web
sockets and XHR polling, and additional features such as multiplexing.
This PR fixed a bug introduced in version 1.5.0 of the library, where
some query string parameters were being ignored. The solution was to use
the ES5 Object.assign function. A polyfill to the function was added in
order to keep backwards compatibility with old IE browsers which were
still being supported at the time.

* https://github.com/socketio/engine.io/pull/444
This PR fixes a bug introduced in version 1.5.1 of the library.
While the fix itself was a simple one line removal, I introduced a
regression test to ensure that the bug does not resurface in the future.

* https://github.com/reduxjs/react-redux/pull/1288
After a lengthy discussion on the right approach to implement component rerenders
on the new react-redux hooks based API, we settled to use referential equality, as
opposed to shallow equality, which was used in the HoC based approach. This mirrors
the way that official react hooks, such as useState, handle rerenders.

* https://github.com/agentk/fontfacegen/pull/26
fontfacegen is a library that uses FontForge in the background to generate
all the font formats required to use custom fonts on the browser. This PR
introduces a new feature to be able to select only a subset of the
characters from the font files to be output. This is especially important
in font sets for Japanese, where the whole font file size could be multiple
MB, but in reality only a handful of characters are needed, reducing the
size significantly.

* https://github.com/libxmljs/libxmljs/pull/521
Adds support for XML processing instructions to the libxmljs library.
One use case is for adding a stylesheet to svg files.
libxmljs is a wrapper around the C library libxml2, and therefore this
PR is mostly C++ code which binds the Node.JS JavaScript engine, V8, to
the relevant libxml2 functions. Implementing this PR was very instructive
in regards to the inner workings of Node.JS.

* https://github.com/final-form/react-final-form/pull/266
Very useful library to manage form state, based on the observer pattern.
This PR introduces an example demonstrating how to integrate lookahead components
with react-final-form and redux, and demonstrates the usage of different
features of the library.

* https://www.npmjs.com/package/redux-persistent
Meant as an alternative to redux-persist, providing a selector based API,
while remaining compatible with its storage ecosystem. Persists redux state
inside a permanent storage, such as localStorage, IndexDB, remote storage,
and hydrates said state back into the store.

* https://github.com/jasonpincin/stream-to-string/pull/1
This small module converts a node stream into a string.
Adds the option to specify a specific encoding when converting a stream to
a string, making it a non-breaking change and adding a regression test.
This PR is later used in my own vinyl-to-string NPM module.

* https://github.com/izolate/html2pug/pull/2
Converts HTML into Pug, an alternative and less verbose templating language,
popular to render HTML in Express applications. The main purpose of this PR
is to replace the jsdom as the HTML parser with the standard parse5 HTML
parser, allowing to handle features of HTML such as comments, parse fragments,
etc.

* https://github.com/itgalaxy/favicons/pull/110
Small NPM module used to generate favicons for different platforms and their
associated files. This PR introduced the option to add the generated HTML
needed to embed to a webpage to use the generated favicons, to the files piped
in the gulp plugin version of the module. This enables additional modifications
to the HTML, such as converting it to Pug using gulp-html2pug.

NPM MODULES

* https://www.npmjs.com/package/i18next-conv}
Due to my many contributions to i18next, I am a member of the official
GitHub i18next organization and became the main maintainer of this module.
This module parses and converts PO files into the i18next format which
is based on JSON. This is useful for teams where the translators use
the gettext industry standard and an integration with i18next is needed.
It has over 5000 weekly downloads.

* https://www.npmjs.com/package/i18next-fetch-backend
One of my contributions to the extensive and popular JavaScript i18n
environment, i18next, this library provides an alternative backend
using fetch, to the default XHR backend, which is useful in environments
where i18next is used both in the server and in the browser.
Currently it has over 2000 monthly downloads.

* https://www.npmjs.com/package/react-scroll-ondrag
React library which exposes a hook to add scrolling ability to react
elements by dragging the mouse. Provides a general and easy-to-implement
solution to the problem.

* https://www.npmjs.com/package/react-stay-scrolled
Currently having 34 stars in GitHub and over 1000 monthly downloads,
this React library helps containers such as chat windows scroll down
automatically whenever new messages arrive.

* https://www.npmjs.com/package/vinyl-contents-tostring
Module used to convert the content of vinyl files (which are the backbone
of gulp) into strings. This is used in many of my gulp plugins.
This module has over 1000 monthly downloads.

* https://www.npmjs.com/package/rollup-plugin-i18next-conv
Rollup plugin integrating i18next-conv. Enables import of PO files,
converting them into JSON resources, which can then be handed to
i18next.
This is useful especially when building a webview application, where
all the content has to be bundled into the app to be used offline.

* https://www.npmjs.com/package/gulp-xml-transformer
Gulp integration for libxmljs.
This module has over 1000 monthly downloads.

Languages
=========================================================================

* Native Spanish

* Fluent English

* Fluent Hebrew

* Japanese Business (JLPT N1 Certified)
